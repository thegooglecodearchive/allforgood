<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="__MSG_title__"
               description="__MSG_description__"
               height="361"
               author="Gadgetfactory"
               author_email="gadgetfactory@google.com">
    <Require feature="wave"/>
    <Require feature="setprefs" />
    <Require feature="dynamic-height" />
    <Require feature="views" />
    <Require feature="opensocial-0.8" />
    <Locale lang="en"
            messages="http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/en_ALL.xml" />
    <Locale messages="http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/en_ALL.xml" />
  </ModulePrefs>
  <UserPref name="storiesToRead"
            display_name="__MSG_listings_per_page__"
            default_value="4"
            datatype="enum">
    <EnumValue value="4" />
    <EnumValue value="5" />
    <EnumValue value="6" />
    <EnumValue value="7" />
    <EnumValue value="8" />
    <EnumValue value="9" />
    <EnumValue value="10" />
  </UserPref>
  <UserPref name="timePeriod"
            display_name="__MSG_time_period__"
            default_value="4"
            datatype="enum">
    <EnumValue value="" display_value="__MSG_everything__"/>
    <EnumValue value="today" display_value="__MSG_today__"/>
    <EnumValue value="this_weekend" display_value="__MSG_this_weekend__"/>
    <EnumValue value="this_week" display_value="__MSG_this_week__"/>
    <EnumValue value="this_month" display_value="__MSG_this_month__"/>
    <EnumValue value="911" display_value="__MSG_september_11__"/>
  </UserPref>
  <UserPref name="themesFolder"
            display_name="__MSG_themes_folder__"
            default_value="" />
  <UserPref name="prefLocation"
            display_name="__MSG_default_location__"
            default_value="" />
  <UserPref name="preferredKeywords"
            display_name="__MSG_preferred_keywords__"
            default_value="" />
  <UserPref name="searchText"
            datatype="hidden"
            default_value="" />
  <UserPref name="category"
            datatype="hidden"
            default_value="" />
<Content type="html" view="home, canvas">
<![CDATA[
<style type="text/css">
body,
div,
form,
h2,
h3,
li,
p,
ul {
  font-weight: normal;
  margin: 0;
  padding: 0;
}
body {
  font-family: arial, sans-serif;
  font-size: 12px;
  margin: 0 auto;
  overflow: hidden;
  text-align: center;
}

td {
  vertical-align: top;
}
img {
  border: 0;
  cursor: pointer;
}
ul { list-style: none; }
h2 {
  font-size: 100%;
  font-weight: normal;
}
h3 {
  font-size: 100%;
  font-weight: bold;
  line-height: 130%;
}
p,
a,
span {line-height: 130%;}
form {text-align: center;}
a,
a:link,
a:visited { color: #039; }
.afg-rec-title a:link { text-decoration: none; }
a:hover {
  color: #039;
  text-decoration: underline;
}

#update-list li {
  border-bottom: 1px solid #eee;
  padding: 5px 10px;
}

.afg-search-links {
  color:#fff;
  margin:1px 0 2px;
  text-align:left;
}
/* Feed data related styles. */
.clear {
  clear: both;
  font-size: 0;
  height: 0;
  line-height: 0;
  overflow: hidden;
}
.afg-record {
  border-bottom: 1px solid #666;
  padding-top: 5px;
}
.afg-record-na {
  height: 60px;
  margin: 20px 0;
  text-align: center;
}
.afg-rec-meta {color: #666;}
.afg-rec-title {font-weight: bold;}

/* Modal popup related styles. */
.afg-mask {
  background-color: #666;
  border: 1px solid #666;
  filter: alpha(opacity=80);
  height: 100%;
  -moz-opacity: 0.8;
  opacity: 0.8;
  width: 100%;
}
.afg-mask,
.afg-dialog {
  margin: auto;
  position: absolute;
  text-align: center;
  top: 0;
}

/* Page layout realted styles. */
#afg-header-region {
  border-bottom: 1px solid #666;
  overflow: hidden;
  width: 100%;
}
#afg-branding-region {padding: 5px;}
#afg-footer-region {
  overflow: hidden;
  width: 100%;
}
#afg-content-region {
  background-color: #fff;
  overflow: hidden;
  text-align: left;
  width: 100%;
}
#afg-branding-btn {
  float: right;
  text-align: left;
}
#afg-branding-title {
  color: #fff;
  margin-right: 50px;
}
#afg-gadget-dialog {
  margin: 33px 20% 0 20%;
  text-align: center;
  width: 60%;
}

/* Modal popup content related styles. */
.afg-text {width: 100%;}
.afg-gobutton {margin-left: 10px;}
.afg-popup-link,
.afg-popup-link:link,
.afg-popup-link:visited,
.afg-popup-link:hover {
  color: #fff;
}

/* Style for pagination. */
.pagination {
  padding: 2px 5px;
  text-align: center;
}

/* Image Cropper related styles. */
.image-cropper {
  display: block;
  overflow: hidden;
  text-align: center;
}
.image-cropper div {margin: 0 -9999px;}
#branding-logo {
  float: left;
  height: 18px;
  line-height: 0;
  width: 107px;
}
#branding-logo img {height: 18px;}
#branding-logo {
  height: 25px;
  width: 112px;
}

/* Style for loading. */
#afg-loading-container {
  text-align: center;
  width: 100%;
}

/* Header links related styles. */
#header-links li{
  float: left;
  padding-right: 10px;
}

#header-links a,
#header-links a:link,
#header-links a:visited,
#header-links a:hover {
  color: #fff;
  text-decoration: underline;
}

#event-list td {
  font-size: 12px;
}

#afg-settings {
  color: #fff;
  margin: auto;
  overflow:hidden;
  text-align:left;
  width:100%;
}

#afg-settings li {
  float: left;
  line-height: 20px;
  padding-right: 5px;
}
.normal li {
  width: 45%;
}
.small li {
  width: 90%;
}
.separator {
  background-color: #ccc;
  clear: both;
  height: 1px;
  margin: 10px 0;
  padding: 0;
}

/* Style to show state colors*/
.updates-action {
  white-space:nowrap;
}
.action-up {
  color:#6242c1;
}
.action-down {
  color:#d52f7d;
}
.action-yes {
  color:#448e44;
}
.action-no {
  color:#b54646;
}
.action-may {
  color:#b1893b;
}
.updates-link,
.updates-link:link,
.updates-link:visited {
  color:#1155a0;
  text-decoration: none;
}
.updates-link:hover {
  text-decoration: underline;
}

.thumbs-up {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: 0 -18px;
  float: left;
  height: 17px;
  width: 19px;
}

.thumbs-up-selected {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: 0 -35px;
  float: left;
  height: 18px;
  width: 19px;
}

.thumbs-down {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: -15px -17px;
  float: left;
  height: 17px;
  width: 19px;
}

.thumbs-down-selected {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: -18px -35px;
  float: left;
  height: 18px;
  width: 19px;
}

.yes-icon {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: 1px 0;
  float: left;
  height: 17px;
  width: 19px;
}

.yes-icon-selected {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: 1px 21px;
  float: left;
  height: 18px;
  width: 19px;
}

.no-icon {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: -15px 0;
  float: left;
  height: 17px;
  width: 18px;
}

.no-icon-selected {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: -19px 21px;
  float: left;
  height: 18px;
  width: 18px;
}

.may-icon {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: -30px 0;
  float: left;
  height: 17px;
  width: 19px;
}

.may-icon-selected {
  background-image: url(http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/icons_mono.png);
  background-position: -37px 21px;
  float: left;
  height: 18px;
  width: 19px;
}

#link-block td {
  vertical-align: middle;
}

#top-navigation {
  border-left: 1px solid #ccc;
  border-right: 1px solid #ccc;
  border-top: 1px solid #ccc;
  padding: 5px 10px;
  text-align: right;
}
</style>
<script type="text/javascript">

/**
 * User prefs.
 * @type {_IG_Prefs}
 */
var prefs = new _IG_Prefs();

/**
 * URL relates to get feed functionality.
 * @const
 * @type {string}
 */
var FEED_URL = 'http://www.allforgood.org/api/volopps?output=rss';

/**
 * To store or cache the feeds between pagination.
 * @type {Array}
 */
var feedRecords = [];

/**
 * Number of pages to be cached on each request to server.
 * @const
 * @type {number}
 */
var PAGES_PER_QUERY = 3;

/**
 * To store the current view of the gadget.
 * @type {Object}
 */
var currentView = gadgets.views.getCurrentView();

/**
 * To store the current state of the view.
 * @type {Object}
 */
var waveState;

/**
 * Flag to check whether wave container or not.
 * @type {boolean}
 */
var isWavelet;

/**
 * Number of stories to show which is based on the view.
 * @type {number}
 */
var numStories = prefs.getInt('storiesToRead');

/**
 * Parameters to be sent with feed URL to get feeds.
 * @type {Object}
 */
var feedParams = {
  vol_loc: '',
  q: '',
  key: 'gf-gadget',
  start: 1,
  timeperiod: prefs.getString('timePeriod'),
  num: numStories * PAGES_PER_QUERY + 1
};

/**
 * To store the information on current page number.
 * @type {number}
 */
var curPage = 1;

/**
 * To store the next page information for the cached pages during pagination
 * as key value pair.
 * @type {Object}
 */
var nextPageInfo = {};

/**
 * Pour the data in template string.
 * @param {Object} datObject The data object to be filled in template string.
 * @return {string} The new string created from template string and filled
 *     with the given data.
 */
String.prototype.supplant = function(datObject) {
  return this.replace(/{([^{}]*)}/g,
    function(match, firstSubMatch) {
      var replace = datObject[firstSubMatch];
      return (typeof replace === 'string' || typeof replace === 'number') ?
          replace : match;
    }
  );
};

/**
 * Adjust the height of the mask automatically.
 * Height 100% for the absolute positioned div is not supported in IE6.
 * This function will be called on window resize event and
 * while showing the Popup container with mask.
 */
function adjustMaskHeight() {
  var afgMask = _gel('afg-gadget-mask');
  var dialog = _gel('afg-gadget-dialog');
  var rootElement = _gel('main-content');
  var height = Math.max(dialog.offsetHeight + 50, rootElement.offsetHeight);
  afgMask.style.top = rootElement.offsetTop + 'px';
  dialog.style.top = rootElement.offsetTop + 'px';
  afgMask.style.height = height + 'px';
  // _IG_AdjustIFrameHeight(height);
}

/**
 * Convert to date object from date string.
 * @param {string} str The date in string format.
 *     If nothing is passed, returns current date.
 * @return {Date} Returns the date object of the given string.
 */
function getDateObj(str) {
  return new Date((str || '').replace(/-/g, '/'));
}

/**
 * This method formats the date string to expected format.
 * @param {string} str The date string from the feed.
 *     The expected input format is yyyy-MM-dd hh:mm:ss.
 * @return {string} Holds date string in 'MM/dd/yyyy' format.
 */
function getDateStr(str) {
  var date = getDateObj(str);
  var day = date.getDate();
  var month = date.getMonth() + 1;
  if (day < 10) {
    day = '0' + day;
  }
  if (month < 10) {
    month = '0' + month;
  }
  return [month, day, date.getFullYear()].join('/');
}

/**
 * Get Google formatted Date String for the given Date.
 * @param {Date} dateObj The date Object which needs to be converted,
 * into google Format.
 * @return {string} returns Google format Date string for a Date Object.
 */
function getDateString(dateObj) {
  var day = dateObj.getDate();
  var month = dateObj.getMonth() + 1;
  var hour = dateObj.getHours();
  var minute = dateObj.getMinutes();
  var second = dateObj.getSeconds();
  if (day < 10) {
    day = '0' + day;
  }
  if (month < 10) {
    month = '0' + month;
  }
  if (hour < 10) {
    hour = '0' + hour;
  }
  if (minute < 10) {
    minute = '0' + minute;
  }
  if (second < 10) {
    second = '0' + second;
  }
  return '' + dateObj.getFullYear() + month + day + 'T' +
      hour + minute + second + 'Z';
}

/**
 * Get Google formatted Calendar Dates String for the given Start and End date.
 * @param {string} startDate The start date.
 * @param {string} endDate The end date.
 * @return {string} returns Google format Calendar Date string for the
 * given start and end date.
 */
function getDateStrings(startDate, endDate) {
  var startDateObj = getDateObj(startDate);
  var endDateObj = getDateObj(endDate);
  if (startDateObj.getTime() > endDateObj.getTime()) {
    return '';
  }
  return '&dates=' + getDateString(startDateObj) + '/' +
      getDateString(endDateObj);
}

/**
 * This method will create HTML element string for single feed item.
 * @param {number} feedIndex Json feed with neccessary changes
 *     for single feed item.
 * @return {string} Returns html string for single feed item.
 */
function getHtmlForOneRecord(feedIndex) {
  var obj = feedRecords[feedIndex];
  var calendarUrl = 'http://www.google.com/calendar/event?action=TEMPLATE' +
      '&text=' + encodeURIComponent(obj.title) +
      '&details=' + encodeURIComponent(obj.desc) + '...' +
      '&location=' + encodeURIComponent(obj.location) +
      getDateStrings(obj.stdate, obj.enddate);
  var html = [
    '<div class="afg-record ', obj.id, '">',
    '<table cellspacing="0" cellpadding="0" style="font-size:13px;',
    'width:100%;padding:0 5px 0 5px;"><tr><td style="width:95%;">',
    '<h3 class="afg-rec-title"><a href="', obj.titleLink, '" target="_blank">',
    obj.title, '</a></h3></td>',
    '<td style="vertical-align:top;">&nbsp;</td></tr></table>',
    '<div style="line-height:130%;padding:0 5px 0 5px;">',
    '<span class="afg-rec-meta"> ', obj.location, ' - ', obj.period,
    '</span>&nbsp;-&nbsp;<span><a href="', calendarUrl, '" target="_blank" >',
    'Add to calendar</a></span></div>',
    '<div style="padding-top:3px;padding:0 5px 5px 5px;"> ', obj.desc, '</div>'
  ];
  if (isWavelet) {
    html.push('<div style="padding-top:3px;background:#f8f8f8;height:20px;" ',
        'id="vote-links"><table cellspacing="0" cellpadding="0" ',
        'style="font-size:12px;padding-left:5px;" id="link-block"><tr>',
        '<td>Attending:</td><td><span id="yes-', obj.storyId, '" ',
        'style="color:#0b6c0b;" title="Yes"></span></td><td>',
        '&nbsp;|&nbsp;</td><td><span id="no-', obj.storyId, '" ',
        'style="color:#b24040;" title="No"></span></td><td>',
        '&nbsp;|&nbsp;</td><td><span id="maybe-', obj.storyId, '" ',
        'style="color:#ad8535;" title="Maybe"></span></td>',
        '<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',
        'Vote:&nbsp;</td><td style="color:#6242c1;"><nobr><span id="linkup-',
        obj.storyId, '" title="Thumbs up"></span>&nbsp;(<span id="up-',
        obj.storyId, '"></span>)</nobr></td><td>&nbsp;|&nbsp;</td><td ',
        'style="color:#d52f7d;"><nobr><span id="linkdwn-', obj.storyId,
        '" title="Thumbs down"></span>&nbsp;(<span id="dwn-', obj.storyId,
        '"></span>)</nobr></td></tr></table></div>');
  }
  html.push('<span style="padding-top:5px;" id="share-news',
            feedIndex, '"></span></div>');
  return html.join('');
}

/**
 * Call back function, will be called when the wave state is changed.
 */
function updateWaveState() {
  waveState = wave.getState();
  var startIndex = (curPage - 1) * numStories;
  var maxEndIndex = startIndex + numStories;
  var endIndex = (maxEndIndex < feedRecords.length) ?
                 maxEndIndex : feedRecords.length;
  var obj, upVal, dwnVal, upId, dwnId, yesId, noId, maybeId;
  var yesList, noList, maybeList;
  var viewerId = wave.getViewer().getId();

  var viewIdUp, viewIdDwn, userDataKey, userData;
  for (var i = startIndex; i < endIndex; i++) {
    obj = feedRecords[i];
    upId = 'up-' + obj.storyId;
    dwnId = 'dwn-' + obj.storyId;
    upVal = waveState.get(upId, 0);
    dwnVal = waveState.get(dwnId, 0);

    userDataKey = 'userData-' + viewerId + '-' + obj.storyId;
    userData = gadgets.json.parse(waveState.get(userDataKey, '{}'));

    viewIdUp = userData.vote == 'up';
    viewIdDwn = userData.vote == 'down';
    var linkUpRef = _gel('linkup-' + obj.storyId);
    var linkDwnRef = _gel('linkdwn-' + obj.storyId);
    if (viewIdUp) {
      linkUpRef.innerHTML = '<span class="thumbs-up-selected"></span>';
    } else {
      linkUpRef.innerHTML = getLinkHtml(obj, 'up', 'thumbs-up');
    }
    if (viewIdDwn) {
      linkDwnRef.innerHTML = '<span class="thumbs-down-selected"></span>';
    } else {
      linkDwnRef.innerHTML = getLinkHtml(obj, 'down', 'thumbs-down');
    }

    yesId = _gel('yes-' + obj.storyId);
    noId = _gel('no-' + obj.storyId);
    maybeId = _gel('maybe-' + obj.storyId);

    switch (userData.attend) {
      case 'yes':
        yesId.innerHTML = '<span class="yes-icon-selected"></span>';
        noId.innerHTML = getLinkHtml(obj, 'no', 'no-icon');
        maybeId.innerHTML = getLinkHtml(obj, 'may', 'may-icon');
        break;
      case 'no':
        yesId.innerHTML = getLinkHtml(obj, 'yes', 'yes-icon');
        noId.innerHTML = '<span class="no-icon-selected"></span>';
        maybeId.innerHTML = getLinkHtml(obj, 'may', 'may-icon');
        break;
      case 'may':
        yesId.innerHTML = getLinkHtml(obj, 'yes', 'yes-icon');
        noId.innerHTML = getLinkHtml(obj, 'no', 'no-icon');
        maybeId.innerHTML = '<span class="may-icon-selected"></span>';
        break;
      default:
        yesId.innerHTML = getLinkHtml(obj, 'yes', 'yes-icon');
        noId.innerHTML = getLinkHtml(obj, 'no', 'no-icon');
        maybeId.innerHTML = getLinkHtml(obj, 'may', 'may-icon');
    }
    if (!upVal) {
      upVal = 0;
    }
    if (!dwnVal) {
      dwnVal = 0;
    }
    _gel(upId).innerHTML = upVal;
    _gel(dwnId).innerHTML = dwnVal;
  }
  var html = [];
  var eventsTrack = gadgets.json.parse(waveState.get('event_track', '{}'));
  var tplHtml = _gel('tpl-update-data').value;
  var tplData, action, actionClass, actionPrefix = '', actionPostfix = '';
  if (eventsTrack) {
    var len = eventsTrack.length;
    var currentEvent;
    for (var i = len - 1; i >= 0; i--) {
      actionPostfix = '';
      actionPrefix = '';
      switch (eventsTrack[i].action) {
        case 'yes':
          action = 'attending';
          actionPrefix = 'is';
          actionClass = 'yes';
          break;
        case 'no':
          action = 'not attending';
          actionPrefix = 'is';
          actionClass = 'no';
          break;
        case 'may':
          action = 'may attend';
          actionClass = 'may';
          break;
        case 'up':
          action = 'voted up';
          actionPrefix = 'has';
          actionClass = 'up';
          break;
        case 'down':
          action = 'voted down';
          actionPrefix = 'has';
          actionClass = 'down';
          break;
      }
      tplData = {
        title: eventsTrack[i].title,
        titleLink: eventsTrack[i].titleLink,
        name: eventsTrack[i].name,
        action: action,
        actionClass: actionClass,
        actionPostfix: actionPostfix,
        actionPrefix: actionPrefix
      };
      html.push(tplHtml.supplant(tplData));
    }
  }
  _gel('update-list').innerHTML = html.join('');
}

/**
 * Returns the link html for current state.
 * @param {Object} obj Selected record.
 * @param {string} state Current state.
 * @param {string} class Class name.
 * @return {string} String html.
 */
function getLinkHtml(obj, state, class) {
  var html = [
    '<a href="#" onclick="updateEventsList(\'', obj.storyId, '\',\'',
    obj.title, '\',\'', obj.titleLink, '\',\'' , state, '\')" class="', class,
    '"></a>'
  ];
  return html.join('');
}

/**
 * To change the sate of the wave.
 * @param {string} id Id of selected news.
 * @param {string} title Title of selected news.
 * @param {string} titleLink Title link of selected news.
 * @param {string} state Current selected state.
 */
function updateEventsList(id, title, titleLink, state) {
  waveState = wave.getState();
  var viewer = wave.getViewer();
  var viewerId = viewer.getId();
  var upId = 'up-' + id;
  var dwnId = 'dwn-' + id;
  var viewerName = viewer.getDisplayName();
  var updateKey = (state == 'up' || state == 'down') ? 'vote' : 'attend';
  var userDataKey = 'userData-' + viewerId + '-' + id;
  var userData = gadgets.json.parse(waveState.get(userDataKey, '{}'));
  var upCount = parseInt(waveState.get(upId, '0'));
  var dwnCount = parseInt(waveState.get(dwnId, '0'));
  var eventTrack = gadgets.json.parse(waveState.get('event_track', '[]'));
  var obj = {};
  if (updateKey == 'vote') {
    var currentState = userData.vote;
    if (state == 'up') {
      ++upCount;
      if (currentState == 'down') {
        --dwnCount;
      }
    } else {
      ++dwnCount;
      if (currentState == 'up') {
        --upCount;
      }
    }
  }
  obj[upId] = upCount;
  obj[dwnId] = dwnCount;

  userData.name = viewerName;
  userData[updateKey] = state;
  userData.title = title;
  userData.titleLink = titleLink;
  obj[userDataKey] = gadgets.json.stringify(userData);

  var trackObj = {
    title: title,
    titleLink: titleLink,
    action: state,
    name: viewerName
  };
  // To show only recent 40 activities.
  if (eventTrack.length > 40) {
    eventTrack = eventTrack.slice(1);
  }
  eventTrack.push(trackObj);
  eventTrack = gadgets.json.stringify(eventTrack);
  obj['event_track'] = eventTrack;
  waveState.submitDelta(obj);
}

/**
 * This function stops the propagation of the event and
 * prevents the default behaviour of the event.
 * @param {Event} event Window event.
 * @return {boolean} Always false will be returned.
 */
function stopEvents(event) {
  event = event || window.event;
  event.stopPropagation();
  event.preventDefault();
  return false;
}

/**
 * Adjust iframe height.
 */
function adjustIFrameHeight() {
  var rootElement = _gel('main-content');
  var gadgetHeight = rootElement.clientHeight || rootElement.offsetHeight;
  gadgetHeight += _gel('top-navigation').offsetHeight;
  gadgetHeight += rootElement.style.marginTop.length;
  if (_gel('afg-search-region-home').style.display == 'block') {
    setDialogHeight();
  }
  _gel('recent-activity').style.height = rootElement.offsetHeight + 'px';
  // Condition to avoid infinite times triggering resize event in IE.
  if (document.body.clientHeight != gadgetHeight) {
    _IG_AdjustIFrameHeight(gadgetHeight);
  }
}

/**
 * To set the height of the dialog and mask.
 */
function setDialogHeight() {
  var mainContentRef = _gel('main-content');
  var mainContentTop = mainContentRef.offsetTop + 'px';
  var afgGadagetDialogRef = _gel('afg-gadget-dialog');
  var afgGadgetMaskRef = _gel('afg-gadget-mask');
  var mainContentLeft = mainContentRef.offsetLeft;
  afgGadagetDialogRef.style.top = mainContentTop;
  afgGadgetMaskRef.style.top = mainContentTop;
  afgGadagetDialogRef.style.left = mainContentLeft + 'px';
  afgGadgetMaskRef.style.left = mainContentLeft + 'px';
}

/**
 * This function updates the Branding title based on the location.
 * @param {string} location Search location value.
 * @param {string} searchText Search text.
 * @param {string} category Category text.
 */
function updateTitle(location, searchText, category) {
  prefs.set('searchText' , searchText || '');
  var str = [prefs.getMsg('recent_listings'), ' '];
  if (searchText) {
    str.push(prefs.getMsg('for'), ' <strong>\'', searchText, '\'<\/strong> ');
    _gel('afg-clear-search').style.display = 'block';
  } else {
    _gel('afg-clear-search').style.display = 'none';
  }
  if (location) {
    str.push(prefs.getMsg('near'), ' <strong>', location, '<\/strong> ');
  }
  if (category) {
    str.push(prefs.getMsg('in_category'), ' <strong>', category, '<\/strong>');
  }
  _gel('afg-branding-title').innerHTML = str.join('');
}

/**
 * Replaces the content region of the container by loading image.
 * The width of the passed element will not be changed.
 * The existing height will be retained, if it is more than 100px,
 * otherwise 100px will be set as its height.
 */
function loading() {
  var element = _gel('afg-content');
  var height = element.clientHeight || element.offsetHeight;
  var MIN_HEIGHT = 100;
  if (height < MIN_HEIGHT) {
    height = MIN_HEIGHT;
  }
  var html = [
    '<div id="afg-loading-container" style="',
    'margin:50px 0;height:', height - 100, 'px;">',
    '<img src="http://www.google.com/ig/images/spinner.gif" />',
    '<div>', prefs.getMsg('loading'), '</div></div>'
  ];
  element.innerHTML = html.join('');
}

/**
 * This function is used to show a popup dialog.
 * @param {string} showString Used to decide which form to be shown.
 */
function showDialog(showString) {
  _gel('afg-search-region-home').style.display = 'block';
  var settingsForm = _gel('afg-settings-form');
  var focusElement;
  if (showString == 'settings') {
    settingsForm.style.display = 'block';
    focusElement = settingsForm.elements[0];
  } else {
    settingsForm.style.display = 'none';
  }
  focusElement.focus();
  adjustMaskHeight();
}

/**
 * This function is used to hide the popup dialog.
 */
function hideDialog() {
  _gel('afg-search-region-home').style.display = 'none';
}

/**
 * Show the Records and update pagination objects
 */
function showRecordsAndUpdatePagination() {
  var html = [];
  var startIndex = (curPage - 1) * numStories;
  var maxEndIndex = startIndex + numStories;
  var endIndex = (maxEndIndex < feedRecords.length) ?
                 maxEndIndex : feedRecords.length;
  for (var i = startIndex; i < endIndex; i++) {
    html.push(getHtmlForOneRecord(i));
  }
  // Add pagination.
  if (curPage !== 1 || nextPageInfo['page-' + curPage]) {
    html.push('<div class="pagination">',
              '<div style="width:100%;overflow:hidden;">');
    if (curPage !== 1) {
      html.push('<a href="#" onclick="navigatePage(-1);return false;" ',
                'style="float:left;"  class="afg-pagination">&lt; ',
                prefs.getMsg('previous'), '</a>');
    }
    if (nextPageInfo['page-' + curPage]) {
      html.push('<a href="#" onclick="navigatePage(1);return false;" ',
                'style="float:right;" class="afg-pagination">',
                prefs.getMsg('next'), ' &gt;</a>');
    }
    html.push('</div></div>');
  }
  // Update content html.
  _gel('afg-content').innerHTML = html.join('');
  if (wave.getState()) {
    updateWaveState();
  }
  adjustIFrameHeight();
}

/**
 * Response error handler function.
 * This function will be called if the request is timed out.
 */
function responseErrorHandler() {
  var html = [
    '<div class="afg-record-na">', prefs.getMsg('no_data'),
    '&nbsp;<a href="#" onclick="requestFeed();return false;">',
    prefs.getMsg('try_again'), '</a></div>'
  ];
  _gel('afg-content').innerHTML = html.join('');
  adjustIFrameHeight();
}

/**
 * Update feed records from the received feed XML.
 * @param {Node} xmlContent XML content as callback function response.
 * @param {number} timerId Value stores a reference to the timer.
 */
function fetchRecords(xmlContent, timerId) {
  // Cancels the timeout set previously.
  clearTimeout(timerId);
  var recordsRequested = numStories * PAGES_PER_QUERY + 1;
  var pageRef, recordRef, item, jsonFeed, curNode;

  try {
    if (typeof xmlContent != 'object') {
      throw new Error('Invalid feed type');
    }

    var items = xmlContent.getElementsByTagName('item');
    var length = items.length;

    if (!length) {
      throw new Error('No feed available');
    }

    if (length == recordsRequested) {
      length = items.length - 1;
    }

    for (var i = 0; i < PAGES_PER_QUERY; i++) {
      pageRef = 'page-' + (curPage + i);
      recordRef = (i + 1) * numStories;
      if (items[recordRef]) {
        nextPageInfo[pageRef] = true;
      }
    }

    for (var j = 0; j < length; j++) {
      item = items[j];
      jsonFeed = {id: 'rec-' + j};
      for (curNode = item.firstChild; curNode; curNode = curNode.nextSibling) {
        if (curNode.nodeType == 1) {
          var nodeVal = curNode.firstChild ? curNode.firstChild.nodeValue : '';
          switch (curNode.nodeName) {
            case 'title':
              jsonFeed.title = nodeVal;
              break;
            case 'link':
              jsonFeed.titleLink = nodeVal;
              break;
            case 'fp:location_name':
              jsonFeed.location = nodeVal;
              break;
            case 'description':
              jsonFeed.desc = nodeVal.replace(/<\/?[^>]+>/g, '');
              break;
            case 'fp:startDate':
              jsonFeed.stdate = nodeVal;
              break;
            case 'fp:endDate':
              jsonFeed.enddate = nodeVal;
              break;
            case 'fp:base_url':
              jsonFeed.storyId = nodeVal;
              break;
          }
        }
      }
      jsonFeed.period = getDateStr(jsonFeed.stdate) +
          ' - ' + getDateStr(jsonFeed.enddate);
      feedRecords.push(jsonFeed);
    }
    showRecordsAndUpdatePagination();
  } catch (err) {
    // For both 'Invalid feed type' and 'No feed available' errors,
    // redirect to previous page if available,
    // shows 'Try again' message otherwise.
    if (curPage > 1) {
      nextPageInfo['page-' + (curPage - 1)] = false;
      navigatePage(-1);
    } else {
      var searchText = prefs.getString('searchText');
      var location = prefs.getString('prefLocation');
      var html = ['<div class="afg-record-na">', prefs.getMsg('your_search')];
      if (searchText) {
        html.push(' <strong>\'', searchText, '\'</strong> ');
      } else if (location) {
        html.push(' ', prefs.getMsg('near'),
            ' <strong>\'', location, '\'</strong> ');
      }
      html.push('&nbsp;', prefs.getMsg('not_match'), '<br/>');
      if (searchText) {
          html.push('<a href="#" onclick="showDialog(\'search\'); ',
              'return false;">', prefs.getMsg('search_again'), '</a></div>');
      } else if (location) {
        html.push('<a href="#" onclick="showDialog(\'settings\'); ',
            'return false;">', prefs.getMsg('change_settings'), '</a></div>');
      }
      _gel('afg-content').innerHTML = html.join('');
      adjustIFrameHeight();
    }
  }
}

/**
 * Prepare URL and send request for the feed.
 * On successful Ajax call fetchRecords() will be called.
 */
function requestFeed() {
  var feedUrl = [FEED_URL];
  for (var key in feedParams) {
    feedUrl.push(key + '=' + _esc(feedParams[key]));
  }
  var feedUrlString = feedUrl.join('&');
  loading();
  // Call responseErrorHandler function after 5 seconds.
  var timerId = setTimeout(responseErrorHandler, 5000);
  _IG_FetchXmlContent(feedUrlString, _IG_Callback(fetchRecords, timerId));
}

/**
 * This function will be called on all navigation stuff.
 * @param {number} step Navigation steps.
 */
function navigatePage(step) {
  curPage += step;
  // Check for avilablity of records.
  var startIndex = (curPage - 1) * numStories;
  if (feedRecords[startIndex]) {
    // Records are already available in the feed, just parse it.
    showRecordsAndUpdatePagination();
  } else {
    // Records are not available, request for records.
    feedParams.start = startIndex + 1;
    requestFeed();
  }
}

/**
 * This function reads the user input,
 * updates title based on the prefered location,
 * resets the feed url parameters, cached feed records and meta information.
 * Also calls requestFeed() to initiate the request.
 * @param {string} opt_searchTxt Search text (optional).
 * @param {boolean} opt_hidePopup Information whether to hide the
 *     dialog window or not (optional).
 */
function search(opt_searchTxt, opt_hidePopup) {
  var location = prefs.getString('prefLocation');
  var prefKeywords = prefs.getString('preferredKeywords');
  var category = prefs.getString('category');
  var searchText = opt_searchTxt || _gel('afg-search-text').value || '';
  updateTitle(_trim(location), searchText, category);
  if (category) {
    category = 'category:' + category;
  }
  feedParams.start = 1;
  feedParams.vol_loc = location;
  feedParams.q = [category, prefKeywords, searchText].join(' ');
  // Reset FeedRecord and pagination related variables.
  feedRecords = [];
  curPage = 1;
  nextPageInfo = {};
  requestFeed();
  if (opt_hidePopup) {
    hideDialog();
  }
}

/**
 * This function is used to cancel the modal window when 'esc' key is pressed.
 * @param {Event} event Window event.
 */
function isCancel(event) {
  event = event || window.event;
  var key = event.keyCode || event.which || event.charCode;
  if (key == 27) {
    hideDialog();
  }
}

/**
 * Function to handle custom theme.
 */
function handleTheme() {
  var themePath = _trim(prefs.getString('themesFolder'));
  if (themePath) {
    var linkElement = document.createElement('link');
    linkElement.href = themePath + '/style.css';
    linkElement.rel = 'stylesheet';
    document.getElementsByTagName('head')[0].appendChild(linkElement);
    document.getElementsByTagName('body')[0].className += ' site-theme';

    _gel('afg-search-button').src = themePath + '/' +
        prefs.getMsg('search_btn') + '.gif';
    _gel('afg-embed-button').src = themePath + '/' +
        prefs.getMsg('embed_btn') + '.gif';
    _gel('afg-go-button').src = themePath + '/' +
        prefs.getMsg('go_btn') + '.gif';
    _gel('afg-ok-button').src = themePath + '/' +
        prefs.getMsg('ok_btn') + '.gif';
    _gel('afg-cancel-button').src = themePath + '/' +
        prefs.getMsg('cancel_btn') + '.gif';
    _gel('afg-cancel-button1').src = themePath + '/' +
        prefs.getMsg('cancel_btn') + '.gif';
  }
}

/**
 * Used to clear the search text box.
 */
function clearSearch() {
  _gel('afg-search-text').value = '';
  search();
}

/**
 * Set the location and restart the search.
 * @param {string} location Location text.
 */
function setLocation(location) {
  _gel('afg-location-text').value = location;
  setSettings();
}

/**
 * To get the select box value.
 * @param {string} id The slect bxox element id.
 * @return {string} The value of the select box.
 */
function getSelectBoxValue(id) {
  var element = _gel(id);
  return element.options[element.selectedIndex].value;
}

/**
 * Set the default selected value for the passed select box element.
 * @param {string} elementId The select box element id.
 * @param {string} value The default value of the select box.
 */
function setSelectBoxValue(elementId, value) {
  var element = _gel(elementId);
  var options = element.options;
  for (var i = 0; i < options.length; i++) {
    if (options[i].value == value) {
      element.selectedIndex = i;
      return;
    }
  }
}

/**
 * Special promotion for September 11 activities.
 */
function promote() {
  var currentDate = new Date();
  var promoStart = new Date();
  promoStart.setFullYear(2009, 8, 1);
  promoStart.setHours(0, 0, 0);

  var promoEnd = new Date();
  promoEnd.setFullYear(2009, 8, 15);
  promoEnd.setHours(0, 0, 1);

  if (promoStart < currentDate && currentDate < promoEnd) {
    var categoryElement = _gel('settings-categories');
    categoryElement.options[categoryElement.length] =
        new Option(prefs.getMsg('september_11'), 'September11');
  }
}

/**
 * To set the default settings of the gadget.
 * It includes location, stories to read and categories.
 */
function setSettings() {
  var noOfStories = getSelectBoxValue('settings-stories');
  var location = _gel('afg-location-text').value || '';
  prefs.set('prefLocation', location);
  prefs.set('storiesToRead', noOfStories);
  prefs.set('category', getSelectBoxValue('settings-categories'));
  numStories = prefs.getInt('storiesToRead');
  feedParams.num = numStories * PAGES_PER_QUERY + 1;
  hideDialog();
  search();
}

/**
 * To set the default values for the settings popup.
 */
function setDefaultSettingsUI() {
  setSelectBoxValue('settings-stories', prefs.getString('storiesToRead'));
  setSelectBoxValue('settings-categories', prefs.getString('category'));
  _gel('afg-location-text').value = prefs.getString('prefLocation');
}

/**
 * To set/change the category.
 * param {string} category Selected category.
 */
function setCategory(category) {
  setSelectBoxValue('settings-categories', category);
  setSettings();
}

/**
 * Called on load of the gadget.
 */
function init() {
  isWavelet = wave && wave.isInWaveContainer();
  waveState = wave.getState();
  handleTheme();
  promote();
  setDefaultSettingsUI();
  if (wave && wave.isInWaveContainer()) {
    wave.setStateCallback(updateWaveState);
  }
  search();
}
/**
 * Resize handler to adjust the mask element height.
 * It sets mask element height equals to the body height.
 */
window.onresize = function() {
  adjustIFrameHeight();
  adjustMaskHeight();
  if (_gel('afg-search-region-home').style.display == 'block') {
    setDialogHeight();
  }
};

/**
 * Entry point.
 */
_IG_RegisterOnloadHandler(init);

</script>
<p id="top-navigation">
  <a target="_blank" href="http://code.google.com/p/allforgood/issues/entry">Feedback & suggestions</a>
</p>
<div style="width:100%;">
  <div id="main-content" style="margin:auto;text-align:center;width:70%;float:left;border:1px solid #ccc">
    <div id="afg-header-region" style="background:#1155a0;">
      <div id="afg-branding-region" style="text-align:left;">
        <div id="afg-branding-btn" style="width:50%;">
          <form name="frmSearch" id="afg-search-form-header" action="#" onsubmit="search();return false;">
            <div style="width:100%;margin:auto;text-align:right;">
            <nobr>
              <input name="searchText" id="afg-search-text" type="text" onkeyup="isCancel(event);" autocomplete="off" style="width:65%;vertical-align:top;"/>&nbsp;
              <input id="afg-go-button" class="afg-go-button" alt="__MSG_go__" title="__MSG_go__" type="image" src="http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/__MSG_go_btn__.gif" onerror="this.src='http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/__MSG_go_btn__.gif'"/>
            </nobr>
            <div style="text-align:right;margin:1px 0 2px;padding-left:8px;color:#fff;">
               __MSG_example__
               <a href="javascript:search('__MSG_education__', 0)" class="afg-popup-link">__MSG_education__</a>
               <a href="javascript:search('__MSG_health__', 0)" class="afg-popup-link">__MSG_health__</a>
               <a href="javascript:search('__MSG_nature__', 0)" class="afg-popup-link">__MSG_nature__</a>
               <a href="javascript:search('__MSG_hunger__', 0)" class="afg-popup-link">__MSG_hunger__</a>
               <a href="javascript:search('__MSG_website__', 0)" class="afg-popup-link">__MSG_website__</a>
               <a href="javascript:search('__MSG_seniors__', 0)" class="afg-popup-link">__MSG_seniors__</a>
               <a href="javascript:search('__MSG_animals__', 0)" class="afg-popup-link">__MSG_animals__</a>
              </div>
            </div>
          </form>
        </div>
        <h2 id="afg-branding-title"></h2>
        <ul id="header-links">
        <li id="afg-change-settings"><a href="javascript:showDialog('settings')">__MSG_change_settings__</a></li>
        <li id="afg-clear-search"><a id="clear-search" href="javascript:clearSearch()">__MSG_clear_search__</a></li>
        </ul>
        <div class="clear">&nbsp;</div>
      </div>
    </div>
    <div id="afg-content-region">
      <div id="afg-content"></div>
    </div>
    <div id="afg-footer-region" style="height:30px;padding-bottom:2px;background:#1155a0;">
        <a id="branding-logo" class="image-cropper" target="_blank"
            href="http://www.allforgood.org">
          <img id="logo-img" alt="__MSG_brand_title__" title="__MSG_brand_title__" style="height:18px;padding:7px 0 0 3px"
                src="http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/logo_wave.gif"
                onerror="this.src='http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/logo_wave.gif'"/>
        </a>
    </div>
    <!-- Search Region for Home View -->
    <div id="afg-search-region-home" style="display: none;">
      <div id="afg-gadget-mask" class="afg-mask" onclick="return stopEvents(event)"></div>
      <div id="afg-gadget-dialog" class="afg-dialog">
         <form name="frmSettings" id="afg-settings-form" action="#" onsubmit="setSettings();return false;">
          <ul id="afg-settings" style="margin: auto;" class="normal">
            <li>Categories</li>
            <li>
              <select name="categories" id="settings-categories" style="width: 100%;" tabIndex="1">
                <option value="">All</option>
                <option value="Animals">__MSG_animals__</option>
                <option value="Education">__MSG_education__</option>
                <option value="Health">__MSG_health__</option>
                <option value="Nature">__MSG_nature__</option>
                <option value="Seniors">__MSG_seniors__</option>
                <option value="Technology">__MSG_technology__</option>
              </select>
            </li>
            <li class="separator" style="width:100%">&nbsp;</li>
            <li style="clear:both;">Listings per page</li>
            <li>
              <select name="stories" id="settings-stories" style="width: 100%;" tabIndex="2">
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10">10</option>
              </select>
            </li>
            <li class="separator" style="width:100%">&nbsp;</li>

            <li style="clear: both;">Time period</li>
            <li>
              <select tabindex="2" style="width: 100%;" name="timePeriod" id="settings-time-period" gtbfieldid="15">
                <option value="everything">__MSG_everything__</option>
                <option value="today">__MSG_today__</option>
                <option value="this_weekend">__MSG_this_weekend__</option>
                <option value="this_week">__MSG_this_week__</option>
                <option value="this_month">__MSG_this_month__</option>
              </select>
            </li>

            <li class="separator" style="width:100%">&nbsp;</li>
            <li style="clear:both;">Location</li>
            <li>
              <input name="locationText" id="afg-location-text" tabIndex="3" type="text" onkeyup="isCancel(event);" autocomplete="off" class="afg-text"/>
              <div style="text-align:left; color: #fff; margin:1px 0 2px">
                __MSG_example__
                <a href="javascript:setLocation('__MSG_default_location_value__')" class="afg-popup-link">
                    __MSG_default_location_value__</a>
              </div>
            </li>
            <li style="text-align:center;clear:both;float:none;width:100%;padding:0;">
              <input id="afg-ok-button" class="afg-ok-button" tabIndex="4"
                alt="__MSG_ok__" title="__MSG_ok__" type="image"
                src="http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/__MSG_ok_btn__.gif"
                onerror="this.src='http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/__MSG_ok_btn__.gif'"/>
              <img id="afg-cancel-button1" class="afg-cancel-button"
                alt="__MSG_cancel__" title="__MSG_cancel__" tabIndex="5"
                onclick="hideDialog();" onkeypress="hideDialog();"
                src="http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/__MSG_cancel_btn__.gif"
                onerror="this.src='http://allforgood.googlecode.com/svn/trunk/frontend/html/gadget/wave/content/__MSG_cancel_btn__.gif'" />
            </li>
          </ul>
        </form>
      </div>
    </div>
  </div>

  <div style="float:right;width:29%;border:1px solid #ccc;text-align:left;" id="recent-activity">
  <div style="background:#1155a0;height:25px;color:#fff;text-align:left;"><h3 style="padding:3px 0 0 5px;">Recent activity</h3></div>
  <div style="overflow-y:scroll;height:96%;">
    <ul id="update-list" style="padding-top:4px;color:#000"></ul>
  </div>
</div>
</div>

<textarea style="display:none;" id="tpl-update-data">
  <li class="updates-record">
    <span class="updates-name">{name}</span>
    <span class="updates-action-prefix">{actionPrefix} </span>
    <span class="updates-action action-{actionClass}">{action}</span>
    <span class="updates-action-postfix">{actionPostfix}</span>
    <a href="{titleLink}" class="updates-link" target="_blank">{title}</a>
  </li>
</textarea>
]]>
</Content>
</Module>
