#summary Setting up your dev environment for working with the AfG codebase.
#labels Phase-Implementation

= Introduction =

There are three major components to the dev environment:

  * The frontend, which includes the allforgood.org website and API data feeds.
  * The backend data loader, which converts volunteer opportunities in various formats into AfG's internal representation.
  * The backend SOLR server, which indexes and stores the opportunities for retrieval by the frontend.

Setting up each component will be discussed below.

==Downloading the code==

All of the code is hosted on Google Code, and is available via SVN.

{{{
svn checkout http://allforgood.googlecode.com/svn/trunk/ allforgood
}}}

The code is broken into a several directories:

  * datahub - The backend data loading code.  See Backend Development below for more details.
  * etc - contains some extraneous SVN setup scripts.
  * frontend - contains the Google App Engine project for the frontend (website and API).  See Frontend Development below for more details.
  * site_down - An alternative App Engine project for when AfG is in maintenance mode.
  * SOLR - the configuration files for the the SOLR Search Engine instance used by the backend.  See Backend Development below for more details.
  * spec - the specification for the Footprint XML format used to load volunteer opprotunities into All For Good.
  * tools - some tools for testing AfG quality.

=Getting Started with Frontend Development=

The frontend is a [http://code.google.com/appengine/ Google App Engine] project, written in Python.  Google App Engine applications can be worked on using the Google App Engine SDK, which is available for all major platforms.  

==Setting up the Google App Engine SDK==

Follow the Getting Started guide for the Google App Engine SDK, and [http://code.google.com/appengine/downloads.html Download] the SDK for Python for your OS.

==Requirements for running the code.==

Before you can run the frontend, you'll need to get a copy of private_keys.py from an approved developer.  This file contains private information, and should not be checked into SVN.

If you just want to checkout the frontend (e.g. page layout) and are not interested in actually running queries, you can use the following as a skeleton private_keys.py:

{{{
DEFAULT_BACKEND_URL_SOLR = 'http://localhost:8983/solr/select/'
FACEBOOK_SECRETS = {}
AFG_GOOGLE_DOCS_LOGIN  = {
    'username' : 'username_here',
    'password' : 'password_here'
}
}}}

Save the above to frontend/private_keys.py.  Some parts of the site should 'work', but the following functionality will not:

  * Facebook integration.
  * Search (unless you are running a SOLR server on localhost).

==The Frontend code structure==

The frontend code is laid out as follows:

  * app.yaml/main.py/urls.py - Maps most incoming URLs to view handlers (see Views below).
  * views.py - This is where the meat of the frontend code lives (see Views below).
  * html/css/js/images - static content (actually served from SVN, see CommonGotchas).
  * templates - contains the Django templates (see Views below).
  * search.py/solr_search.py - interacts with SOLR backend.
  * scoring.py - sorts the SOLR results.
  * api.py - Logic for API output.
  * everything else - there's a lot more code, too much to go into in this guide.

The above list should help get you pointed to the right spot.

===Views===

_Explain Webapp views_

===The API===

_Explain the API._

===Searching Volunteer Opportunities ===

_Explain search code._

=Getting started with Backend/Search Engine Development=

==Data loading code structure==

_Link to datahub/README_

_Explain that this is running on some box somewhere..._

==SOLR Search Engine structure==

_Link to SOLR, explain that it's somewhere._

=Committing Code changes=

==Getting commit access==

==The code review process==